
F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000633  00000000  00000000  00010467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001d6  00000000  00000000  00010a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  00010ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180fd  00000000  00000000  00010d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a0f  00000000  00000000  00028e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00047fa6  00000000  00000000  00029840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000d0  00000000  00000000  000717e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000718b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003d4 	.word	0x080003d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003d4 	.word	0x080003d4

080001d4 <GPIO_Config>:

void GPIO_Config(void);
void delay(uint32_t time);

void GPIO_Config(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <GPIO_Config+0x28>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <GPIO_Config+0x28>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (1<<10);\
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <GPIO_Config+0x2c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a05      	ldr	r2, [pc, #20]	; (8000200 <GPIO_Config+0x2c>)
 80001ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001ee:	6013      	str	r3, [r2, #0]



}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40023800 	.word	0x40023800
 8000200:	40020000 	.word	0x40020000

08000204 <delay>:

void delay(uint32_t time )
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	while(time --);
 800020c:	bf00      	nop
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	1e5a      	subs	r2, r3, #1
 8000212:	607a      	str	r2, [r7, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d1fa      	bne.n	800020e <delay+0xa>
}
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <main>:
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
   SysClockConfig();
 800022c:	f000 f844 	bl	80002b8 <SysClockConfig>
   GPIO_Config();
 8000230:	f7ff ffd0 	bl	80001d4 <GPIO_Config>

   while(1)
   {
	   GPIOA->BSRR |= (1<<5);
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <main+0x34>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a08      	ldr	r2, [pc, #32]	; (800025c <main+0x34>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6193      	str	r3, [r2, #24]
	   delay(10000000);
 8000240:	4807      	ldr	r0, [pc, #28]	; (8000260 <main+0x38>)
 8000242:	f7ff ffdf 	bl	8000204 <delay>
	   GPIOA->BSRR |= (1<<21);
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x34>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	4a04      	ldr	r2, [pc, #16]	; (800025c <main+0x34>)
 800024c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000250:	6193      	str	r3, [r2, #24]
	   delay(10000000);
 8000252:	4803      	ldr	r0, [pc, #12]	; (8000260 <main+0x38>)
 8000254:	f7ff ffd6 	bl	8000204 <delay>
	   GPIOA->BSRR |= (1<<5);
 8000258:	e7ec      	b.n	8000234 <main+0xc>
 800025a:	bf00      	nop
 800025c:	40020000 	.word	0x40020000
 8000260:	00989680 	.word	0x00989680

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 f87b 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ffc7 	bl	8000228 <main>

0800029a <LoopForever>:

LoopForever:
  b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a8:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC_IRQHandler>
	...

080002b8 <SysClockConfig>:
void SysClockConfig(void);



void SysClockConfig(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
#define PLL_M 4
#define PLL_N 84
#define PLL_P 0 //VERY IMPORTANT WHY THIS IS 0

//1.enable the HSE and WAIT for the HSE TO become ready
RCC->CR |= RCC_CR_HSEON;
 80002bc:	4b30      	ldr	r3, [pc, #192]	; (8000380 <SysClockConfig+0xc8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a2f      	ldr	r2, [pc, #188]	; (8000380 <SysClockConfig+0xc8>)
 80002c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002c6:	6013      	str	r3, [r2, #0]
while(!(RCC->CR & RCC_CR_HSERDY));
 80002c8:	bf00      	nop
 80002ca:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <SysClockConfig+0xc8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f9      	beq.n	80002ca <SysClockConfig+0x12>

//2.set the POWER ENABLE CLOCK AND VOLTAGE REGULATOR
RCC->APB1ENR |=RCC_APB1ENR_PWREN;
 80002d6:	4b2a      	ldr	r3, [pc, #168]	; (8000380 <SysClockConfig+0xc8>)
 80002d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002da:	4a29      	ldr	r2, [pc, #164]	; (8000380 <SysClockConfig+0xc8>)
 80002dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e0:	6413      	str	r3, [r2, #64]	; 0x40
//PWR_CR POWER  CONTROL REGISTER keep it at reset
PWR->CR |= PWR_CR_VOS;
 80002e2:	4b28      	ldr	r3, [pc, #160]	; (8000384 <SysClockConfig+0xcc>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a27      	ldr	r2, [pc, #156]	; (8000384 <SysClockConfig+0xcc>)
 80002e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002ec:	6013      	str	r3, [r2, #0]

//3.configure the FLASH PREFETCH and the LATENCY related setting
//flash interface registers
FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN;
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <SysClockConfig+0xd0>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a25      	ldr	r2, [pc, #148]	; (8000388 <SysClockConfig+0xd0>)
 80002f4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80002f8:	6013      	str	r3, [r2, #0]
FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <SysClockConfig+0xd0>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <SysClockConfig+0xd0>)
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	6013      	str	r3, [r2, #0]

//4.configure the PRESCALARS PCLK ,PCLK1 ,PCLK2
//RCC clock configuration register
//ahb1
RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000306:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <SysClockConfig+0xc8>)
 8000308:	4a1d      	ldr	r2, [pc, #116]	; (8000380 <SysClockConfig+0xc8>)
 800030a:	689b      	ldr	r3, [r3, #8]
 800030c:	6093      	str	r3, [r2, #8]
//apb1
RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <SysClockConfig+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4a1b      	ldr	r2, [pc, #108]	; (8000380 <SysClockConfig+0xc8>)
 8000314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000318:	6093      	str	r3, [r2, #8]
//apb2
RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <SysClockConfig+0xc8>)
 800031c:	4a18      	ldr	r2, [pc, #96]	; (8000380 <SysClockConfig+0xc8>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	6093      	str	r3, [r2, #8]

//5.configure the main PLL
//RCC PLL configuration register
RCC->PLLCFGR |= (PLL_M<<0) | (PLL_N<<6) | (PLL_P<<16);
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <SysClockConfig+0xc8>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	4a16      	ldr	r2, [pc, #88]	; (8000380 <SysClockConfig+0xc8>)
 8000328:	f443 53a8 	orr.w	r3, r3, #5376	; 0x1500
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6053      	str	r3, [r2, #4]
//SELECT SRC AS WELL
RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <SysClockConfig+0xc8>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <SysClockConfig+0xc8>)
 8000338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800033c:	6053      	str	r3, [r2, #4]

//6.enable the PLL and wait for it to become ready
//RCC clock control register
RCC->CR |= RCC_CR_PLLON;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <SysClockConfig+0xc8>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a0f      	ldr	r2, [pc, #60]	; (8000380 <SysClockConfig+0xc8>)
 8000344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000348:	6013      	str	r3, [r2, #0]
while(!(RCC->CR & RCC_CR_PLLRDY));
 800034a:	bf00      	nop
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <SysClockConfig+0xc8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000354:	2b00      	cmp	r3, #0
 8000356:	d0f9      	beq.n	800034c <SysClockConfig+0x94>

//7.select the clock source and wait for it to be set
//clock configuration register
RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <SysClockConfig+0xc8>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <SysClockConfig+0xc8>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	6093      	str	r3, [r2, #8]
while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000364:	bf00      	nop
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <SysClockConfig+0xc8>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	f003 030c 	and.w	r3, r3, #12
 800036e:	2b08      	cmp	r3, #8
 8000370:	d1f9      	bne.n	8000366 <SysClockConfig+0xae>

}
 8000372:	bf00      	nop
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40007000 	.word	0x40007000
 8000388:	40023c00 	.word	0x40023c00

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4d0d      	ldr	r5, [pc, #52]	; (80003c4 <__libc_init_array+0x38>)
 8000390:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000392:	1b64      	subs	r4, r4, r5
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	2600      	movs	r6, #0
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	4d0b      	ldr	r5, [pc, #44]	; (80003cc <__libc_init_array+0x40>)
 800039e:	4c0c      	ldr	r4, [pc, #48]	; (80003d0 <__libc_init_array+0x44>)
 80003a0:	f000 f818 	bl	80003d4 <_init>
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	2600      	movs	r6, #0
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
